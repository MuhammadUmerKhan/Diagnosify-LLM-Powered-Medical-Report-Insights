MedicalReportAnalyzer/
├── logs/ 📋           # Stores log files (e.g., chatbot.log) for debugging 🐞
│   └── chatbot.log    # Logs app activity and errors
├── tmp/ ⏳            # Temporary storage for uploaded files during processing
├── scripts/ 🛠️           # Core logic and utility modules
│   ├── config.py ⚙️  # Loads API keys, sets temp folder, and MongoDB URI
│   ├── logger.py 🐞  # Configures logging to logs/chatbot.log
│   ├── ocr.py 📝     # Extracts text from PDFs using PyPDF2 (image support commented)
│   ├── preprocess.py 🔍 # Preprocesses PDFs for text extraction
│   ├── nlp.py 🧠     # Structures extracted text into JSON data
│   ├── categorize.py ✅ # Categorizes results (Normal, Borderline, Critical)
│   ├── table_formatter.py 📊 # Formats results for display in tables
│   ├── explain.py 📘 # Generates simple explanations for medical terms
│   ├── summary.py 📋  # Creates bullet-point summaries and recommendations
│   ├── pdf_generator.py 📄 # Generates downloadable PDF summaries
│   ├── streaming.py 💻 # Streams real-time chatbot responses
│   ├── utils.py 🧰   # Helper functions (LLM setup, chat history, CSS)
│   ├── ragas_evaluator.py 📈 # Evaluates chatbot accuracy with RAGAS and stores chat history in MongoDB
│   └── README.md 📚  # Documentation for the src/ folder
├── pages/ 📑         # Streamlit multi-page interface
│   ├── 🧐_Analyze.py 🩺 # Displays analyzed report results and PDF download
│   ├── 🤖_Assistant.py 💬 # RAG chatbot for interactive report questions
│   └── ⚖️_RAGAS_Evaluation.py 📊 # Shows chat history and RAGAS faithfulness metrics
├── 🏠_Home.py 🌐     # Main entry point for uploading and processing reports
├── .env 🔐           # Environment variables (API keys, MongoDB credentials)
├── requirements.txt 📋 # List of Python dependencies
└── README.md 📖      # Main project documentation (this file)